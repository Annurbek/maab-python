class Employee:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –∏ –º–µ—Ç–æ–¥–∞–º–∏."""
    
    def __init__(self, employee_id, name, position, salary):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
        
        Args:
            employee_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            name: –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            position: –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            salary: –ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        """
        self.employee_id = employee_id
        self.name = name
        self.position = position
        try:
            self.salary = float(salary)
        except ValueError:
            raise ValueError("–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    def __str__(self):
        return f"{self.employee_id}, {self.name}, {self.position}, {self.salary:.2f}"

    def to_line(self):
        return f"{self.employee_id},{self.name},{self.position},{self.salary}\n"

    @staticmethod
    def from_line(line):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Employee –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞."""
        try:
            parts = line.strip().split(",")
            if len(parts) != 4:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏")
            return Employee(parts[0], parts[1], parts[2], parts[3])
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
class EmployeeManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""

    def __init__(self, filename="employees.txt"):
        self.filename = filename
    
    def validate_employee_id(self, employee_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
        if not employee_id.strip():
            raise ValueError("ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if not employee_id.isalnum():
            raise ValueError("ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã")
        return True

    def add_employee(self, employee):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Ñ–∞–π–ª."""
        try:
            self.validate_employee_id(employee.employee_id)
            if self.search_employee(employee.employee_id):
                print("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return False
            with open(self.filename, "a") as file:
                file.write(employee.to_line())
            print("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {str(e)}")
            return False

    def view_all_employees(self, sort_by=None):
        """
        –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π.
        
        Args:
            sort_by: –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ('name', 'salary', 'position')
        """
        try:
            employees = []
            with open(self.filename, "r") as file:
                for line in file:
                    try:
                        employees.append(Employee.from_line(line))
                    except ValueError as e:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å: {str(e)}")
                        continue

            if not employees:
                print("‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            if sort_by:
                if sort_by == 'name':
                    employees.sort(key=lambda x: x.name)
                elif sort_by == 'salary':
                    employees.sort(key=lambda x: x.salary)
                elif sort_by == 'position':
                    employees.sort(key=lambda x: x.position)

            print("\nüìã –ó–∞–ø–∏—Å–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö:")
            for emp in employees:
                print(emp)
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    def search_employee(self, employee_id):
        """–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID."""
        try:
            with open(self.filename, "r") as file:
                for line in file:
                    try:
                        employee = Employee.from_line(line)
                        if employee.employee_id == employee_id:
                            return employee
                    except ValueError:
                        continue
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    def update_employee(self, employee_id, name=None, position=None, salary=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ."""
        updated = False
        employees = []

        try:
            with open(self.filename, "r") as file:
                for line in file:
                    try:
                        emp = Employee.from_line(line)
                        if emp.employee_id == employee_id:
                            if name and name.strip():
                                emp.name = name
                            if position and position.strip():
                                emp.position = position
                            if salary and salary.strip():
                                emp.salary = float(salary)
                            updated = True
                        employees.append(emp)
                    except ValueError as e:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å: {str(e)}")
                        continue

            if updated:
                with open(self.filename, "w") as file:
                    for emp in employees:
                        file.write(emp.to_line())
                print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            else:
                print("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

    def delete_employee(self, employee_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ."""
        deleted = False
        employees = []

        try:
            with open(self.filename, "r") as file:
                for line in file:
                    try:
                        emp = Employee.from_line(line)
                        if emp.employee_id != employee_id:
                            employees.append(emp)
                        else:
                            deleted = True
                    except ValueError:
                        continue

            with open(self.filename, "w") as file:
                for emp in employees:
                    file.write(emp.to_line())

            if deleted:
                print("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω.")
            else:
                print("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

    def menu(self):
        while True:
            print("\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–ø–∏—Å–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!")
            print("1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            print("2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
            print("3. –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            print("4. –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ")
            print("5. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            print("6. –í—ã–π—Ç–∏")

            choice = input("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä: ")

            if choice == "1":
                try:
                    emp_id = input("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ")
                    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
                    position = input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: ")
                    salary = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É: ")
                    employee = Employee(emp_id, name, position, salary)
                    self.add_employee(employee)
                except ValueError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

            elif choice == "2":
                print("\n–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏?")
                print("1. –ü–æ –∏–º–µ–Ω–∏")
                print("2. –ü–æ –∑–∞—Ä–ø–ª–∞—Ç–µ")
                print("3. –ü–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
                print("4. –ë–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
                sort_choice = input("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä (1-4): ")
                
                sort_by = None
                if sort_choice == "1":
                    sort_by = "name"
                elif sort_choice == "2":
                    sort_by = "salary"
                elif sort_choice == "3":
                    sort_by = "position"
                
                self.view_all_employees(sort_by)

            elif choice == "3":
                emp_id = input("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
                employee = self.search_employee(emp_id)
                if employee:
                    print("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω:")
                    print(employee)
                else:
                    print("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            elif choice == "4":
                emp_id = input("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ")
                name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ")
                position = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ")
                salary = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞—Ä–ø–ª–∞—Ç—É (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ")
                self.update_employee(emp_id, name, position, salary)

            elif choice == "5":
                emp_id = input("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
                self.delete_employee(emp_id)

            elif choice == "6":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    manager = EmployeeManager()
    manager.menu()